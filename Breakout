/* Constants for bricks */
var NUM_ROWS = 8;
var BRICK_TOP_OFFSET = 10;
var BRICK_SPACING = 2;
var NUM_BRICKS_PER_ROW = 10;
var BRICK_HEIGHT = 10;
var SPACE_FOR_BRICKS = getWidth() - (NUM_BRICKS_PER_ROW + 1) * BRICK_SPACING;
var BRICK_WIDTH = SPACE_FOR_BRICKS / NUM_BRICKS_PER_ROW;

/* Constants for ball and paddle */
var PADDLE_WIDTH = 80;
var PADDLE_HEIGHT = 15;
var PADDLE_OFFSET = 10;

var BALL_RADIUS = 15;

/* Global variables */
var brick;
var ball;
var dx = 4;
var dy = 4;
var paddle;
var brickNum = 80;
var count = 0; 


function start(){
	drawBricks();
	ball = new Circle (BALL_RADIUS);
	var xBall = getWidth()/2;
	var yBall = getHeight()/2;
	ball.setPosition(xBall, yBall);
	add(ball);
	
	setTimer(moveBall, 20);
	
	var xPaddle = xBall - 40;
	var yPaddle = getHeight() - PADDLE_OFFSET - PADDLE_HEIGHT;
	paddle = new Rectangle(PADDLE_WIDTH, PADDLE_HEIGHT);
	paddle.setPosition(xPaddle, yPaddle);
	add(paddle);
	
	mouseMoveMethod(movePaddle);
}




//This function moves ball on the screen
function moveBall(){
    checkWalls();
    checkPaddle();
    checkBrick();
	ball.move(dx, dy);
}

function checkWalls(){
	// Bounce off right wall
	if(ball.getX() + ball.getRadius() > getWidth()){
		dx = -dx;
	}
	
	// Bounce off left wall
	if(ball.getX() - ball.getRadius() < 0){
		dx = -dx;
	}
	
	// Bounce off top wall
	if(ball.getY() - ball.getRadius() < 0){
		dy = -dy;
	}
	
	// check loose life
	if(ball.getY() - ball.getRadius() > getHeight()){
		count++;
		if(count < 3){
		    restart();
		}else{
		    displayMessage("You lose");
		}
	}
}
//This function sets timer 
function goBall(e){
    setTimer(moveBall, 20);
}

//This function locates ball in the Center
//of the screen and after mouse is cklicked 
//ball starts to move.
function restart(){
    ball.setPosition(getWidth()/2, getHeight()/2);
    stopTimer(moveBall);
    mouseClickMethod(goBall);
    
}
/*This functions removes brick when ball colide with them */

function checkBrick(){
    var elem = getElementAt(ball.getX(), ball.getY() - ball.getRadius());
    var elem1 = getElementAt(ball.getX() - ball.getRadius(), ball.getY());
    var elem2 = getElementAt(ball.getX() + ball.getRadius(), ball.getY());
    if(elem != null && elem != paddle){
        remove(elem);
        brickNum--;
        dy = -dy;
    }
    if(elem1 != null && elem1 != paddle){
        remove(elem1);
        brickNum--;
        dx = -dx;
    }
    if(elem2 != null && elem2 != paddle){
        remove(elem2);
        brickNum--;
        dx = -dx;
    }
    if(brickNum == 0){
        displayMessage("You win ðŸ™‚");
        
    }
}

function displayMessage(text){
    stopTimer(moveBall);
    var msg = new Text(text, "40pt arial");
	msg.setPosition(getWidth()/2 - msg.getWidth()/2, getHeight()/2 - msg.getHeight()/2);
	add(msg);
}

/*This function has ball bounce off paddle */
function checkPaddle(){
    var elem = getElementAt(ball.getX(), ball.getY() + ball.getRadius());
    if(elem == paddle){
        dy = -dy;
    }
}


/* This function draws brick wall 
 * first tow rows is red, second tow - orange
 * next tow - green and last tow - blue */
function drawBricks(){
    for(var i = 0; i < NUM_BRICKS_PER_ROW; i++){
        for(var l = 0; l < NUM_ROWS; l++){
            brick = new Rectangle(BRICK_WIDTH, BRICK_HEIGHT);
            brick.setColor(Color.red);
            brick.setPosition(BRICK_SPACING + BRICK_SPACING * i + BRICK_WIDTH * i,
                        BRICK_TOP_OFFSET + BRICK_SPACING * l + BRICK_HEIGHT * l);
            add(brick);
            if(l == 2 || l == 3){
                brick.setColor(Color.orange)
            }else if(l == 4 || l == 5){
                brick.setColor(Color.green)
            }else if(l == 6 || l == 7){
                brick.setColor(Color.blue)
            }
        }
    }
}

/* This function has paddle move by mouse
 * it moves horizontally */
function movePaddle(e){
    if(e.getX() > PADDLE_WIDTH/2 && e.getX()  < getWidth() - PADDLE_WIDTH/2){
        paddle.setPosition(e.getX() - PADDLE_WIDTH/2, getHeight() - PADDLE_OFFSET - PADDLE_HEIGHT);
    }
}
